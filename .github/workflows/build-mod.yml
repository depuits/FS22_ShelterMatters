name: Build and Deploy Farming Simulator Mod

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Matches tags like v1.0.0, v1.1.2, etc.

permissions:
  contents: write
  
jobs:
  deploy:
    name: Deploy Mod
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Prepare the ZIP file
      - name: Create ZIP Archive
        run: |
          MOD_NAME="ShelterMatters"
          ZIP_NAME="FS22_${MOD_NAME}.zip"
          zip -r $ZIP_NAME . -x ".git*" ".github/*" "*.DS_Store" "README.md"
          echo "ZIP_FILE=$ZIP_NAME" >> $GITHUB_ENV

      # Step 3: Determine deployment target
      - name: Set Release Details
        id: set-release
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            RELEASE_NAME="Release $VERSION"
            RELEASE_TAG="$VERSION"
            IS_PRERELEASE=false
          else
            RELEASE_NAME="Development Build"
            RELEASE_TAG="dev-latest"
            IS_PRERELEASE=true
          fi

          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV

      # Step 5: Create Release on GitHub
      - name: Create GitHub Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const zipPath = process.env.ZIP_FILE;
            const releaseName = process.env.RELEASE_NAME;
            const releaseTag = process.env.RELEASE_TAG;
            const isPreRelease = process.env.IS_PRERELEASE === 'true';

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: releaseTag,
              name: releaseName,
              prerelease: isPreRelease
            });

            const releaseId = release.data.id;

            const zipFileContent = fs.readFileSync(zipPath);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              name: zipPath,
              data: zipFileContent
            });
